import re
import getpass
from enum import Enum, auto

class StrengthLevel(Enum):
    WEAK = auto()
    MEDIUM = auto()
    STRONG = auto()
    VERY_STRONG = auto()

class PasswordAssessor:
    def __init__(self):
        self.min_length = 8
        self.max_length = 64
        self.common_passwords = [
            'password', '123456', '12345678', '1234', 
            'qwerty', '12345', 'yash', 'cricket'
        ]
    
    def assess_strength(self, password):
        if not password:
            return StrengthLevel.WEAK, ["Password cannot be empty"]
        
        
        if password.lower() in self.common_passwords:
            return StrengthLevel.WEAK, ["Password is too common"]
        
        
        length = len(password)
        if length < self.min_length:
            return StrengthLevel.WEAK, [f"Password too short (min {self.min_length} chars)"]
        if length > self.max_length:
            return StrengthLevel.WEAK, [f"Password too long (max {self.max_length} chars)"]
        
        
        score = 0
        feedback = []
        
        
        has_upper = bool(re.search(r'[A-Z]', password))
        has_lower = bool(re.search(r'[a-z]', password))
        has_digit = bool(re.search(r'[0-9]', password))
        has_special = bool(re.search(r'[^A-Za-z0-9]', password))
        
        
        if length >= 12:
            score += 2
        elif length >= 8:
            score += 1
        
        
        score += has_upper + has_lower + has_digit + has_special
        
        
        if has_upper and has_lower and has_digit and has_special and length >= 12:
            score += 2
        
        
        if score < 3:
            strength = StrengthLevel.WEAK
            feedback.append("Add more character types (upper, lower, numbers, special)")
        elif score < 5:
            strength = StrengthLevel.MEDIUM
            feedback.append("Consider adding more character types or length")
        elif score < 7:
            strength = StrengthLevel.STRONG
            feedback.append("Good password! Could be longer for more security")
        else:
            strength = StrengthLevel.VERY_STRONG
            feedback.append("Excellent password!")
        
        
        if not has_upper:
            feedback.append("Add uppercase letters")
        if not has_lower:
            feedback.append("Add lowercase letters")
        if not has_digit:
            feedback.append("Add numbers")
        if not has_special:
            feedback.append("Add special characters")
        if length < 12:
            feedback.append("Consider making password longer (12+ characters)")
        
        return strength, feedback
    
    def get_password_strength(self, password):
        strength, feedback = self.assess_strength(password)
        return {
            'strength': strength.name.replace('_', ' ').title(),
            'score': self._calculate_score(strength),
            'length': len(password),
            'has_upper': bool(re.search(r'[A-Z]', password)),
            'has_lower': bool(re.search(r'[a-z]', password)),
            'has_digit': bool(re.search(r'[0-9]', password)),
            'has_special': bool(re.search(r'[^A-Za-z0-9]', password)),
            'feedback': feedback
        }
    
    def _calculate_score(self, strength):
        if strength == StrengthLevel.WEAK:
            return 1
        elif strength == StrengthLevel.MEDIUM:
            return 2
        elif strength == StrengthLevel.STRONG:
            return 3
        return 4

def display_results(results):
    print("\nPassword Strength Analysis:")
    print(f"Strength: {results['strength']}")
    print(f"Score: {results['score']}/4")
    print(f"Length: {results['length']} characters")
    print("\nCharacteristics:")
    print(f"- Contains uppercase: {'Yes' if results['has_upper'] else 'No'}")
    print(f"- Contains lowercase: {'Yes' if results['has_lower'] else 'No'}")
    print(f"- Contains numbers: {'Yes' if results['has_digit'] else 'No'}")
    print(f"- Contains special chars: {'Yes' if results['has_special'] else 'No'}")
    
    print("\nRecommendations:")
    for item in results['feedback']:
        print(f"- {item}")

def main():
    print("Password Strength Assessor")
    print("-------------------------")
    
    assessor = PasswordAssessor()
    
    while True:
        try:
            password = input("Enter password: ")

            if password.lower() == 'exit':
                break
                
            results = assessor.get_password_strength(password)
            display_results(results)
            
            print("\nTry another password or type 'exit' to quit")
        except KeyboardInterrupt:
            print("\nExiting...")
            break

if __name__ == "__main__":
    main()
 

